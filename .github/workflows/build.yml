name: Build Test

on:
  push:
    branches: [ main ]  # 当推送到main分支时触发
    tags:
      - 'v*'  # 当推送v开头的tag时触发

# 添加必要的权限
permissions:
  contents: write
  actions: write
  checks: write
  packages: write

env:
  PYTHONIOENCODING: utf-8
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python --version
        pip --version
        pip install -r requirements.txt -v
        pip install pyinstaller -v
        
    - name: Build Windows
      shell: pwsh
      run: |
        Get-ChildItem -Recurse
        
        if (-not (Test-Path "TingQuanChanger.spec")) {
          Write-Error "Spec file not found!"
          exit 1
        }
        
        Write-Host "Starting PyInstaller build..."
        $buildOutput = & python -m PyInstaller --noconfirm --log-level DEBUG TingQuanChanger.spec *>&1
        $buildOutput | Out-File -FilePath build_output.log -Encoding UTF8
        Get-Content build_output.log
        
        Write-Host "Checking build output..."
        Set-Location dist
        Get-ChildItem -Recurse
        
        $exeName = "听泉CursorPro换号工具.exe"
        $dirName = "听泉CursorPro换号工具"
        
        if (Test-Path $exeName) {
          Write-Host "Build output found: Single file mode"
          New-Item -ItemType Directory -Force -Path $dirName
          Move-Item -Force $exeName $dirName
          Copy-Item -Force ..\README.md $dirName
          Copy-Item -Force ..\requirements.txt $dirName
          
          Write-Host "Creating ZIP archive..."
          Compress-Archive -Force -Path $dirName -DestinationPath ..\听泉CursorPro换号工具-Windows.zip
          
          Set-Location ..
          if (Test-Path "听泉CursorPro换号工具-Windows.zip") {
            Write-Host "ZIP file created successfully"
            Get-Item "听泉CursorPro换号工具-Windows.zip"
          } else {
            Write-Error "ZIP file creation failed"
            exit 1
          }
        } else {
          Write-Error "Build failed - executable not found"
          Get-ChildItem -Recurse
          exit 1
        }
        
    - name: Upload Build Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: 听泉CursorPro换号工具-Windows
        path: 听泉CursorPro换号工具-Windows.zip
        retention-days: 5
        
    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-windows
        path: build_output.log

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-14]
        include:
          - os: macos-latest
            platform: intel
            suffix: MacIntel
          - os: macos-14
            platform: arm
            suffix: Mac
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python --version
        pip --version
        pip install -r requirements.txt -v
        pip install pyinstaller -v
        
    - name: Build MacOS
      run: |
        export PYTHONIOENCODING=utf-8
        export LANG=en_US.UTF-8
        export LC_ALL=en_US.UTF-8
        
        # 显示当前目录结构
        echo "Current directory structure:"
        ls -la
        
        if [ ! -f "TingQuanChanger.spec" ]; then
          echo "Spec file not found!"
          exit 1
        fi
        
        # 显示spec文件内容
        echo "Spec file contents:"
        cat TingQuanChanger.spec
        
        echo "Starting PyInstaller build..."
        python -m PyInstaller TingQuanChanger.spec --clean --noconfirm --log-level DEBUG 2>&1 | tee build_output.log
        
        echo "Checking build output..."
        cd dist
        echo "Files in dist directory:"  # 输出dist目录内容
        ls -la
        find . -type f -exec file {} \; # 显示所有文件的类型信息
        
        # 检查是否存在dist目录下的任何可执行文件
        EXEC_NAME=""
        # 尝试查找所有可能的可执行文件名称（包括中文名称和ASCII名称）
        find . -type f -perm -u+x | while read file; do
          echo "Found executable: $file"
          EXEC_NAME="$file"
          break
        done
        
        # 如果还没找到，尝试查找.app包中的可执行文件
        if [ -z "$EXEC_NAME" ]; then
          find . -name "*.app" -type d | while read app; do
            if [ -f "$app/Contents/MacOS/"* ]; then
              EXEC_NAME=$(find "$app/Contents/MacOS/" -type f -perm -u+x | head -1)
              echo "Found app executable: $EXEC_NAME"
              break
            fi
          done
        fi
        
        if [ ! -z "$EXEC_NAME" ]; then
          echo "Build output found: $EXEC_NAME"
          
          # 创建发布目录
          RELEASE_DIR="TingQuanChanger_release"
          rm -rf "$RELEASE_DIR"
          mkdir -p "$RELEASE_DIR"
          
          # 复制文件并重命名
          cp "$EXEC_NAME" "$RELEASE_DIR/听泉CursorPro换号工具"
          chmod +x "$RELEASE_DIR/听泉CursorPro换号工具"
          cp ../README.md "$RELEASE_DIR/"
          cp ../requirements.txt "$RELEASE_DIR/"
          
          # 创建ZIP文件
          cd ..
          rm -f "听泉CursorPro换号工具-${{ matrix.suffix }}.zip"
          cd dist
          zip -r "../听泉CursorPro换号工具-${{ matrix.suffix }}.zip" "$RELEASE_DIR"/*
          
          cd ..
          if [ -f "听泉CursorPro换号工具-${{ matrix.suffix }}.zip" ]; then
            echo "ZIP file created successfully"
            ls -l "听泉CursorPro换号工具-${{ matrix.suffix }}.zip"
          else
            echo "ZIP file creation failed"
            exit 1
          fi
        else
          echo "Build failed - executable not found"
          echo "Contents of dist directory:"  # 输出dist目录内容
          ls -la
          echo "Contents of build directory:"  # 输出build目录内容
          cd ../build
          ls -la
          exit 1
        fi
        
    - name: Upload Build Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: 听泉CursorPro换号工具-${{ matrix.suffix }}
        path: 听泉CursorPro换号工具-${{ matrix.suffix }}.zip
        retention-days: 5
        
    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.suffix }}
        path: build_output.log

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python --version
        pip --version
        pip install -r requirements.txt -v
        pip install pyinstaller -v
        
    - name: Build Linux
      run: |
        # 显示当前目录结构
        echo "Current directory structure:"
        ls -la
        
        if [ ! -f "TingQuanChanger.spec" ]; then
          echo "Spec file not found!"
          exit 1
        fi
        
        # 显示spec文件内容
        echo "Spec file contents:"
        cat TingQuanChanger.spec
        
        echo "Starting PyInstaller build..."
        python -m PyInstaller TingQuanChanger.spec --clean --noconfirm --log-level DEBUG 2>&1 | tee build_output.log
        
        echo "Checking build output..."
        cd dist
        echo "Files in dist directory:"
        ls -la
        find . -type f -exec file {} \; # 显示所有文件的类型信息
        
        # 检查是否存在dist目录下的任何可执行文件
        EXEC_NAME=""
        # 尝试查找所有可能的可执行文件名称（包括中文名称和ASCII名称）
        find . -type f -perm -u+x | while read file; do
          echo "Found executable: $file"
          EXEC_NAME="$file"
          break
        done
        
        if [ ! -z "$EXEC_NAME" ]; then
          echo "Build output found: $EXEC_NAME"
          
          # 创建发布目录
          RELEASE_DIR="TingQuanChanger_release"
          rm -rf "$RELEASE_DIR"
          mkdir -p "$RELEASE_DIR"
          
          # 复制文件并重命名
          cp "$EXEC_NAME" "$RELEASE_DIR/听泉CursorPro换号工具"
          chmod +x "$RELEASE_DIR/听泉CursorPro换号工具"
          cp ../README.md "$RELEASE_DIR/"
          cp ../requirements.txt "$RELEASE_DIR/"
          
          # 创建ZIP文件
          cd ..
          rm -f "听泉CursorPro换号工具-Linux.zip"
          cd dist
          zip -r "../听泉CursorPro换号工具-Linux.zip" "$RELEASE_DIR"/*
          
          cd ..
          if [ -f "听泉CursorPro换号工具-Linux.zip" ]; then
            echo "ZIP file created successfully"
            ls -l "听泉CursorPro换号工具-Linux.zip"
          else
            echo "ZIP file creation failed"
            exit 1
          fi
        else
          echo "Build failed - executable not found"
          echo "Contents of dist directory:"
          ls -la
          echo "Contents of build directory:"
          cd ../build
          ls -la
          exit 1
        fi
        
    - name: Upload Build Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: 听泉CursorPro换号工具-Linux
        path: 听泉CursorPro换号工具-Linux.zip
        retention-days: 5
        
    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-linux
        path: build_output.log